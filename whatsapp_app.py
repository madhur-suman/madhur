from flask import Flask, request, jsonify
from twilio.twiml.messaging_response import MessagingResponse
from twilio.rest import Client
from config import Config
from db import create_database_schema
from expiry_alert import setup_cron_job, send_expiry_alerts
from kirana_qa_pipeline import kirana_qa_pipeline
import logging
import threading

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config.from_object(Config)

# Initialize Twilio client
twilio_client = Client(Config.TWILIO_ACCOUNT_SID, Config.TWILIO_AUTH_TOKEN)

# In-memory storage for user language preferences (use DB in prod)
user_languages = {}

# Language messages
MESSAGES = {
    'en': {
        'welcome': """ü§ñ *Sales Analytics Bot*

Choose your preferred language:

1Ô∏è‚É£ English  
2Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä

Reply with 1 or 2 to select.""",
        'help': """Ask me anything about your inventory or sales. Examples:

‚Ä¢ "Which item sold the most last week?"
‚Ä¢ "Add 10 Maggi"
‚Ä¢ "Remove 5 detergents"
‚Ä¢ "Which items expire in 3 days?" 

Type 'help' anytime for this message.
Type 'language' to change language.""",
        'language_changed': "‚úÖ Language changed to English!",
        'error': "Sorry, I encountered an error. Please try again."
    },
    'hi': {
        'welcome': """ü§ñ *‡§∏‡•á‡§≤‡•ç‡§∏ ‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§¨‡•â‡§ü*

‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:

1Ô∏è‚É£ English  
2Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä

‡§ú‡§µ‡§æ‡§¨ ‡§Æ‡•á‡§Ç 1 ‡§Ø‡§æ 2 ‡§≠‡•á‡§ú‡•á‡§Ç‡•§""",
        'help': """‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡§∞‡•Ä ‡§Ø‡§æ ‡§∏‡•á‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£:

‚Ä¢ "‡§™‡§ø‡§õ‡§≤‡•á ‡§π‡§´‡•ç‡§§‡•á ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§ø‡§ï‡§æ?"
‚Ä¢ "10 ‡§Æ‡•à‡§ó‡•Ä ‡§ú‡•ã‡§°‡§º‡•ã"
‚Ä¢ "5 ‡§°‡§ø‡§ü‡§∞‡•ç‡§ú‡•á‡§Ç‡§ü ‡§π‡§ü‡§æ‡§ì"
‚Ä¢ "‡§ï‡•å‡§®‡§∏‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç 3 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞ ‡§π‡•ã‡§Ç‡§ó‡•Ä?"

‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§Ø 'help' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§
‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 'language' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§""",
        'language_changed': "‚úÖ ‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à!",
        'error': "‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
    }
}

def get_user_language(number):
    return user_languages.get(number, 'en')

def set_user_language(number, lang):
    user_languages[number] = lang

def get_message(key, lang='en'):
    return MESSAGES.get(lang, MESSAGES['en']).get(key, MESSAGES['en'][key])

@app.route('/')
def home():
    return jsonify({
        "message": "WhatsApp Sales Analytics Bot",
        "status": "running",
        "endpoints": {
            "webhook": "/whatsapp",
            "health": "/health"
        }
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

@app.route('/whatsapp', methods=['POST'])
def whatsapp_webhook():
    """Main WhatsApp webhook"""
    try:
        incoming_msg = request.values.get('Body', '').strip()
        from_number = request.values.get('From', '')

        if from_number.startswith('whatsapp:'):
            phone_number = from_number.split('whatsapp:')[1]
        else:
            phone_number = from_number

        logger.info(f"Message from {phone_number}: {incoming_msg}")

        resp = MessagingResponse()
        msg = resp.message()
        user_lang = get_user_language(phone_number)

        # Handle language setup
        if not incoming_msg:
            msg.body(get_message('welcome', user_lang))
            return str(resp)

        if incoming_msg in ['1', '2']:
            selected = 'en' if incoming_msg == '1' else 'hi'
            set_user_language(phone_number, selected)
            msg.body(get_message('language_changed', selected))
            return str(resp)

        if incoming_msg.lower() in ['language', '‡§≠‡§æ‡§∑‡§æ', 'lang']:
            msg.body(get_message('welcome', user_lang))
            return str(resp)

        if incoming_msg.lower() in ['help', 'h', '?', '‡§Æ‡§¶‡§¶']:
            msg.body(get_message('help', user_lang))
            return str(resp)

        # Expiry alert trigger
        if incoming_msg.lower() in ['expiry', 'expire', '‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞‡•Ä']:
            msg.body("Sending expiry alerts..." if user_lang == 'en' else "‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞‡•Ä ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§≠‡•á‡§ú‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
            threading.Thread(target=send_expiry_alerts).start()
            return str(resp)

        # **Pass every other message to kirana_qa_pipeline**
        response = kirana_qa_pipeline(incoming_msg, phone_number)
        msg.body(response)
        return str(resp)

    except Exception as e:
        logger.error(f"Webhook error: {e}")
        resp = MessagingResponse()
        resp.message(get_message('error'))
        return str(resp)

@app.route('/send-message', methods=['POST'])
def send_message():
    """Send a message manually via API"""
    data = request.get_json()
    to_number = data.get('to')
    message = data.get('message')

    if not to_number or not message:
        return jsonify({"error": "Missing 'to' or 'message'"}), 400

    sent = twilio_client.messages.create(
        from_=f'whatsapp:{Config.TWILIO_WHATSAPP_NUMBER}',
        body=message,
        to=f'whatsapp:{to_number}'
    )
    return jsonify({"success": True, "sid": sent.sid, "status": sent.status})

if __name__ == '__main__':
    create_database_schema()
    setup_cron_job()
    app.run(host='0.0.0.0', port=5001, debug=Config.DEBUG)
